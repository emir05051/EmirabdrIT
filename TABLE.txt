tr - создает линию
td - создает ячейку
<form method = "get"> - передает все через URL
<"post"> - передать файлы
<a="link" target="_blank">

<h1 id="h1">				- элемент для прокрутки
<a href="#h1">  			- сделать ссылку на прокрутку

<button> type="reset" - очищает
type="submit" - отправляет

<input name=" "> - задать ключ
value=" ">  
type="submit" "reset" 
"checkbox" - отображает кнопку для галочки 
<label> - чтобы текст тоже был кликабельный (фокусировка)
tabindex="num" - в каком порядке переключаться между элементами формы (если -1, то пропускается)
type="radio" - добавляет кружок (почти multipy answer) (если одинаковые name=" " - то можно выбрать только один
type="password" - текст в виде точек (пароль)
type="file" - загрузить фото (multiple - несколько файлов)
type="data" - позволяет выбрать дату
type="datetime-local" - дату со временем
type="color" - выбрать цвет
type="email" - выглядит как обычное поле, но можно использовать только символы для почты
type="tel" - для телефонов. 
<input type="number" - для ввода цифр, можно кнопками увеличивать или уменьшать числа
max="num" min="num"> - не меньши и не больше
type="url" - для ввода сайтов
type="month" - год и месяц
type="search" - запоминает подсказки для поиска
type="range" - добавляет ползунок 
type="hidden" - невидимый для пользователя

maxlenght="num" - максимальное количество символов
minlenght="num" - минимальное количество символов
disabled - отключить
required - обязательно для заполнения

<select>
	<option>text </option>		Выпадающий список
	<option>text2 </option>		с выбором
</select>

<option selected> - выбран по умолчанию

<optgroup label="name">   		сделать группу в селекте. label - дает имя группе
	<option> </option>
	

<textarea>
	text		позволяет растягивать текст, теги внутри не юзаются
</textarea>
rows="num" - сколько строк по умолчанию


data-name="" 				- выдать атрибут (кастомный атрибут)

<hr/> - нарисовать линию
<br/> - перенести линию


CSS
 
style="background-color: " - сделать задний фон цвет
		transparent - прозрачный
		inherit	    - будет наследовать цвет от родительского элемента
		hsla(0,0%,0%,0.6) - затемнить экран  
	;background-image: url("ссылка") 	-сделать картинку на фон(она не будет подстраиваться под размеры)(можно через запятую еще одну картинку добавить, тогда в последующий свойствах через точку с запятой значение для второй картинки (если не задавать, то будут значения общие для всех))
			   linear-gradient((num)deg, color, color)		-добавить на фон градиент(если для двух значений сделать один процент то они будут переходить без градиента)
			   radial-gradient((num)deg, color, color)		-градиент будет из центра идти в края (все градиенты придерживаются правилам ниже также как и картинки)
		;background-size: cover		-чтобы картинка встала правильно
				  num(px)	-сделать ширину и длины картинки (картинка будет повторяться)
		;background-repeat: repeat	-картинка будет повторяться
				    no-repeat	-не будет повторяться
		;background-position: center 	-поставит картинку в центр 	(можно top center - тогда будет вверху в центре и т.п.) (если будет включен repeat, то будет повторяться по этой оси)
		;background-origin: border-box/content-box	-границу будет использовать тоже для фона (фон будет присутствовать прям на них)
		;background-attachment: scroll 		-умолчание
					fixed 		-картинку растянет на все элементы, картинка не скроллиться вместе с контентом
	;color:  	   - сделать цвет текста
	;opacity: (0-1)	   - регулирует прозрачность элемента и всего его содержимого
	;box-shadow: 5px 10px 10px 5px color (inset-тень будет внутри, а не снаружи элемента)   - задает тень  (первые две цифры - координаты,первая координата - ось X, вторая ось Y (можно использовать минусовые), третья цифра это размытие, четвертая - на сколько будет тень больше элемента)
	;text-shadow: 5px 10px 10px color 	- задает тень текста
	;width:		   - задать ширину
	;height:	   - задать высоту
	;min-width	   - 
	;min-height	   - минимальная высота элемента 
	;max-width	   -
	;max-height	   -
	;font-style:	   -выдать стиль 			
		     italic - курсив
		     oblique (num)deg - задать наклонность
	;font-family: (названия шрфитов через запятую),sans-serif	- добавляет другой шрифт тексту (если первого не будет, то идет следующий шрифт, который указан через запятую)
			monospace 					- консольный текст, где все буквы одинаковы по размерам
	;font-weight: (100-900) - задать жирность шрифта 	(normal-400) (использовать только значения, кратные 100)
	;font-size: (num)px - сделать размер шрифта
			 pt - как в ворде размер (аналог пикселям)
			 em - 1em=размер шрифта от body (можно использовать много для чего)
			 rem - такжде как и еm, считается от <html>
	;line-height: (num)px 						- меняет размер строки 	(можно использовать просто цифру без измерений, будет учитывать от стандартного размера (2=в 2 раза больше от начального)
	;outline: (num)px solid color:					- добавляет границу вокруг внешней границы элемента
		outline-width: (num)px 					- задать ширину оутлайна
	

	transform: 								-перемещает элемент от своей изначальной позиции, изначальное место элемента остается (если в процентах, то от размера элемента считается) (можно отрицательные значения, будет в обратную сторону)
			translateX(numpx)						-пермещает по оси X		(-numpx будет сдвиг влево)
			translateY(numpx)						-пермещает по оси Y		(-numpx будет свдиг вверх)
			translateZ(numpx)						-пермещает по оси Z
			translate(numpx, numpx)						-пермещает по оси X и У
			translate3d(numpx)						-перемещает по трем сторонам	
						
			transform: scale(2px, 0.5px)					-увелчит размер ширину в два раза, а высоту уменьшит в два раза. (первая цифра эта X, вторая Y) (растягивается относительно центра)
			
			transform-origin: top left/bottom right/другое			-указывает какая точка будет "якорем" 	точка, от которй будут идти расчеты

			transform: skewX(45deg)						-искажает элемент на сколько-то градусов. В данном слчае по оси X на 45 градусов. Вместо Х можно ставить Y (минусовые тоже можно использовать)
				   skew(45deg 45deg) 					-искажает сразу по двум осям на 45 градусов

			transform: rotateZ(30 deg)					-повернет по оси Z на 30 градусов 		(по другм осям тоже можно)
			
			transform-style: preserve-3d					-чтобы элементы вели себя как в 3д 		(выдается родителю контейнеру)


	transition: all	(будет ко всему) (если написать background - то анимируется только цвет) (num)s		(style)		- изменение анимации 		(применяется, когда элемент хоть как-то меняется)
														linear - 	-линейная, все с одной скоростью
														ease-in 	-медленнее начинаем, быстрее заканчиваем
														ease-out	-быстрое начало, медленный конец
														ease-in-out	-быстро только в начале
			transition-property:			
			
			transition-duration:
			
			transition-delay: (num)s					-пауза перед анимацией

			transition-timing-function: 
							


			
	;overflow:	   - что делать если содержимое вываливается из контейнера
		hidden; - сделать невидимым
		visible; - оставить как есть (видимым)
		scroll; - сделать скроллбар
		auto; - автоматически добавляет скроллбар если есть переполнение 
		;overflow-x: настроить переполнение оси у
		;overflow-y: настроить переполнение оси х
		;text-overflow: elipces
		;overflow-wrap:break-word  			-чтобы слова не переносились
		

	;margin:	   - создает отступы со всех сторон  (auto) - автоматически по центру
		margin left: auto - автоматический отступ слева
		margin right: auto - автоматический отступ справа
	
	;padding:(num)px           - делает обивку в пикселях
		padding-top: (num)px			делать
		padding-bottom (num)px			отсутпы 
		padding-left: (num)px			со всех
		padding-right: (num)px 			сторон
		padding: (num)px (num)px (num)px (num)px - верх,право,низ,лево.
		padding: (num)px 10px (num)px -верх и низ = num, лево и право - 10. если сделать только два num, то это будет вертикаль и лево право.
	
	;box-sizing: 
		border-box;  - делает так, чтобы граница не добавлялась поверх, а вычиталась 
	
	border: (num) px solid(неприрывная) color - сделать границу
			 dotted(граница из точек)
			 dashed(чертачками)
			 double(двойная граница)
			 ridge(грацниа 3д(выпуклая))
		border-top,left,right,bottom: все значения можно настросить отдельно
		border-width: num(px)
		border-color: (несколько цветов отдельно границам)
		border-style: (стили(нужно выбрать стиль))
		border-radius: (num) - делает закругленные границы (каждые углы можно по отдельности настраивать как в паддингах) (50%-круг) (если хочешь текст в круге, то сделать паддинги с такими же значениями)
			border-top-left-radius: (num) (num) настроить угол по высоте и ширине (можно топ, лефт менять на боттом райт и т.п.)

	display:		-задает модель, которую мы настраиваем формулами ниже
		inline;		-cделать элемент инлайном
		block		-сделать элемент блочным
		inline-block	-сделать инлайнами элементы блочными (span)	
		table  		-занимает ширину только своего содержимого 
		none 		-элемент пропадает со страницы
		flex		-действует на детей классов
			flex-direction: row; -строка(умолчание) 
					row-reverse; -справа на лево, реверсия
					column; - превращаются в мелкие строчные блоки
					column-reverse; реверсированные колонны
			flex-wrap: nowrap  - умолчание	- запретить перенос
					wrap;   - все элементы, которые не помещаются, переносятся на следующую, иначе все будут в одной строке
					wrap-reverse - перенос идет вверх
			align-items:    stretch; -выровнить элементы(умолчание)
					center; - по высоте столько, сколько нужно их контенту, элементы будут отцентрированны, выравниваются относительно центра друг друга
					flex-end; - по концу
					flex-start; - по началу	
			justify-content: flex-start - по умолчанию
					flex-end - сдвинет в обратную сторону, но не поменяет текст .
					center - все выровняется по центру
					space-between - сделать свободное пространство
					space-around - пространство вокруг каждого элемнта
					space-evenly - более равномерный around
			order:		-делает порядок элементов
			align-self: center   - выравнивание по центру
				    flex-end - выравниване справа
			   	    flex-start - выравнивание слева
			object-fit: cover 	-вырежет фото (не растягивает а именно вырезает по ширине, обрезает) 
			float: left		-обтекание картинки текстом слева
			       right		-обтекание картинки текстом справа	
			clear: (сторона) 	-запретить обтекание с какой-либо стороны (both-запретить с двух сторон)
	ДЛЯ ДЕТЕЙ
	flex-grow:	-может увеличивать размер больше первоначального 		(0-отключить) 
	flex-shrink:	-может уменьшать размер меньше первоначального 			(0-отключить)
	flex-basis:	-стандартный размер						(можно выдовать размеры просто цифрами через пробtk flex: (1(flex-grow) 2(flex-shrink) 3(flex-basis))
							 
	
	;position:
		static; 		-стоит там где стоит (default)
		relative;		-для всех других элементов стоял там где стоял 
		absolute;		-поставить в абсолютную позицию от родительского элемента с position, вытаскивается из контекста. перестает существовать для других элементов (слева сверху)
		fixed;			-даже при скроллинге продолжает оставаться на месте, все время отсчитывается от окна 
						

				top: (num), left:(num) и т.д. 	-менять позицию относительно первоначального положения 
				z-index: (num без измерений) 	- задает на каком слое лежит элемент (элементы с разных классов друг с другом не конкурируют)
 
	;top,bottom,right,left
		
	

<style>
	div{
		background-color:			для всех div применяется (можно в отдельном файле)
		;color:
	}
</style>

<link href="" rel="stylesheet"/>

#-<id>
.-<class>	

SELECTORS

class > tag{} - тэги первого уровня (только на первой ветке в одном классе)
selecotr + selector{} - соседи (только первый сосед)
selector ~{} - все последующие (соседи снизу)
tag.class{} - выбрать только этим тэгам в определнном классе
div div{} - все div которые находятся в div
*{} - вообще ко всему

:hover{} - при наводке курсором работает только 
:active{} - для ссылок, действует во время, когда нажали, но еще не отпустили 
:visited{} - для ссылок, которые уже посещали 
input:focus{} - когда фокусриуешься тогда работает (для инпута круто) (элементы инпута и ссылок, для табулияции )
:checked{} - для чекбоксов, которые отмечены
:disabled{} - для выключенных
:required{} - для обязательных
:invalid{} - для неправильных
:first-child{} - для первых потомков
:last-child{} - выберет последний элемент 
:nth-child(2n){} -выберет все четные элементы
	  (2n+1){}- выберет все нечетные элементы (формулу можно менять)


::before{} - перед всеми указанными элементами			{:content "text"; }
::after{} -  после всех указанных элементов			content только для before и after 	

a[hreflang="ru"]{} - только для всех ссылок с атрибутом ru		

100%=100vh/100vw  -100% от экрана

